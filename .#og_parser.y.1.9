%{
//-- don't change *any* of these: if you do, you'll break the compiler.
#include <cdk/compiler.h>
#include "ast/all.h"
#define LINE               compiler->scanner()->lineno()
#define yylex()            compiler->scanner()->scan()
#define yyerror(s)         compiler->scanner()->error(s)
#define YYPARSE_PARAM_TYPE std::shared_ptr<cdk::compiler>
#define YYPARSE_PARAM      compiler
//-- don't change *any* of these --- END!
#include <algorithm>
std::shared_ptr<cdk::basic_type> int_primitive = cdk::make_primitive_type(4, cdk::TYPE_INT);
std::shared_ptr<cdk::basic_type> real_primitive = cdk::make_primitive_type(8, cdk::TYPE_DOUBLE);
std::shared_ptr<cdk::basic_type> string_primitive = cdk::make_primitive_type(4, cdk::TYPE_STRING);
std::shared_ptr<cdk::basic_type> pointer_primitive = cdk::make_primitive_type(4, cdk::TYPE_POINTER);
std::shared_ptr<cdk::basic_type> void_primitive = cdk::make_primitive_type(0, cdk::TYPE_VOID);
std::shared_ptr<cdk::basic_type> unspec_primitive = cdk::make_primitive_type(0, cdk::TYPE_UNSPEC);
%}

%union {
  int                   i;	/* integer value */
  double                d;
  std::string          *s;	/* symbol name or string literal */
  cdk::basic_node      *node;	/* node pointer */
  cdk::sequence_node   *sequence;
  cdk::expression_node *expression; /* expression nodes */
  cdk::lvalue_node     *lvalue;
  cdk::basic_type      *type;
  std::shared_ptr<cdk::basic_type> *primitive_type;
  og::block_node       *block;
  og::for_node         *for_type;

};

%token <i> tINTEGER
%token <s> tIDENTIFIER tSTRING tPUBLIC tREQUIRE
%token <primitive_type> tAUTO
%token tWHILE tIF tPRINT tREAD tBEGIN tEND

%token tINT tREAL tPTR tPUBLIC tREQUIRE tSIZEOF tINPUT tNULLPTR tPROCEDURE tBREAK tCONTINUE tIF tTHEN tELIF tELSE tFOR tDO tWRITE tWRITELN tRETURN tSTRING_TYPE

%nonassoc tIF tIFX
%nonassoc tTHEN tDO
%nonassoc tELIF tELSE
%nonassoc tIDENTIFIER

%right '=' '[' ','
%left tGE tLE tEQ tNE '>' '<' '@'
%left '+' '-'
%left '*' '/' '%'
%nonassoc tUNARY

%type <expression> expr
/*%type <lvalue> lval*/
%type <block>  block
%type <sequence> file declarations function_declarations variables expressions  instructions identifiers
%type <node> declaration function_declaration variable function procedure instruction elif conditional innerblock
%type<lvalue> identifier
%type <primitive_type> type
%type<for_type> iteration

%{
//-- The rules below will be included in yyparse, the main parsing function.
%}
%%

/* Main file ---------------------------------------------------------------- */

file         :              { compiler->ast($$ = new cdk::sequence_node(LINE)); }
             | declarations { compiler->ast($$ = $1); }
             ;

declaration  : variable ';' { $$ = $1; }
             | function     { $$ = $1; }
             | procedure    { $$ = $1; }
             ;

declarations : declaration              { $$ = new cdk::sequence_node(LINE, $1); }
             | declaration declarations { $$ = new cdk::sequence_node(LINE, $1, $2); }
             ;

/* -------------------------------------------------------------------------- */


/* Variables ---------------------------------------------------------------- */

variable    :          type  tIDENTIFIER                 {$$ = new og::variable_declaration_node(LINE, $1, *$2, "",  nullptr);}
            | tPUBLIC  type  tIDENTIFIER                 {$$ = new og::variable_declaration_node(LINE, $2, *$3, *$1, nullptr);}
            | tREQUIRE type  tIDENTIFIER                 {$$ = new og::variable_declaration_node(LINE, $2, *$3, *$1, nullptr);}
            |          type  tIDENTIFIER '=' expr        {$$ = new og::variable_declaration_node(LINE, $1, *$2, "",  $4); }
            | tPUBLIC  type  tIDENTIFIER '=' expr        {$$ = new og::variable_declaration_node(LINE, $2, *$3, *$1, $5); }
            | tREQUIRE type  tIDENTIFIER '=' expr        {$$ = new og::variable_declaration_node(LINE, $2, *$3, *$1, $5); }
            | tAUTO identifiers '=' expressions {
                /* Throw error when len(identifiers) != len(expressions) */
                cdk::sequence_node* new_variables_sequence = new cdk::sequence_node(LINE);
                //std::reverse($4->nodes().begin(), $4->nodes().end());
                for (size_t i = 0; i < $2->size(); i++) {
                    std::string variable_name = static_cast<cdk::variable_node*>($2->node(i))->name();
                    cdk::basic_node* item = new og::variable_declaration_node(LINE, &unspec_primitive, variable_name, "", static_cast<cdk::expression_node*>($4->node(i)));
                    new_variables_sequence->nodes().push_back(item);
                }
                //std::reverse(new_variables_sequence->nodes().begin(), new_variables_sequence->nodes().end());
                $$ = new_variables_sequence;
            }
            | tPUBLIC tAUTO identifiers '=' expressions {
                cdk::sequence_node* new_variables_sequence = new cdk::sequence_node(LINE);
                //std::reverse($5->nodes().begin(), $5->nodes().end());
                for (size_t i = 0; i < $3->size(); i++) {
                    std::string variable_name = static_cast<cdk::variable_node*>($3->node(i))->name();
                    cdk::basic_node* item = new og::variable_declaration_node(LINE, &unspec_primitive, variable_name, *$1, static_cast<cdk::expression_node*>($5->node(i)));
                    new_variables_sequence->nodes().push_back(item);
                }
                //std::reverse(new_variables_sequence->nodes().begin(), new_variables_sequence->nodes().end());
                $$ = new_variables_sequence;
            }
            ;

variables   : variable                { $$ = new cdk::sequence_node(LINE, $1);}
            | variable ',' variables  { $$ = new cdk::sequence_node(LINE, $1, $3);}
            ;



type        : tINT                { $$ = &int_primitive; }
            | tREAL               { $$ = &real_primitive; }
            | tSTRING_TYPE        { $$ = &string_primitive; }
            | tPTR '<' type  '>'  { $$ = &pointer_primitive; }
            | tPTR '<' tAUTO '>'  { $$ = &unspec_primitive; }
            ;

identifier : tIDENTIFIER            { $$ = new cdk::variable_node(LINE, *$1);}
           ;

identifiers : identifier                   { $$ = new cdk::sequence_node(LINE, $1); }
            | identifiers ',' identifier   { $$ = new cdk::sequence_node(LINE, $3, $1);}
            ;


/* -------------------------------------------------------------------------- */


/* Instructions ------------------------------------------------------------- */

instruction  : expr                 ';'  {$$ = $1;}
             | tWRITE expressions   ';'  {$$ = new og::write_node(LINE, new cdk::sequence_node(LINE, $2));}
             | tWRITELN expressions ';'  {$$ = new og::writeln_node(LINE, new cdk::sequence_node(LINE, $2));}
             | tBREAK                    {$$ = new og::break_node(LINE);}
             | tCONTINUE                 {$$ = new og::continue_node(LINE);}
             | tRETURN expressions  ';'  {$$ = new og::return_node(LINE, new cdk::sequence_node(LINE, $2));}
             | tRETURN              ';'  {$$ = new og::return_node(LINE, nullptr);}
             | conditional               {$$ = $1;}
             | iteration                 {$$ = $1;}
             | identifier '=' expr  ';'  {$$ = new cdk::assignment_node(LINE, $1, $3); }
             ;

instructions : instruction                {$$ = new cdk::sequence_node(LINE, $1);}
             | instructions instruction   {$$ = new cdk::sequence_node(LINE, $2, $1);}
             ;

iteration    : tFOR             ';'             ';'             tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE),     $5);}
             | tFOR variables   ';'             ';'             tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE, $2), new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE),     $6);}
             | tFOR             ';' expressions ';'             tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE, $3), new cdk::sequence_node(LINE),     $6);}
             | tFOR             ';'             ';' expressions tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE, $4), $6);}
             | tFOR variables   ';' expressions ';'             tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE, $2), new cdk::sequence_node(LINE, $4), new cdk::sequence_node(LINE),     $7);}
             | tFOR variables   ';'             ';' expressions tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE, $2), new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE, $5), $7);}
             | tFOR             ';' expressions ';' expressions tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE, $3), new cdk::sequence_node(LINE, $5), $7);}
             | tFOR variables   ';' expressions ';' expressions tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE, $2), new cdk::sequence_node(LINE, $4), new cdk::sequence_node(LINE, $6), $8);}
             | tFOR expressions ';' expressions ';' expressions tDO innerblock  {$$ = new og::for_node(LINE, new cdk::sequence_node(LINE, $2), new cdk::sequence_node(LINE, $4), new cdk::sequence_node(LINE, $6), $8);}
             ;


conditional  : tIF expr tTHEN innerblock %prec tIFX   {$$ = new og::if_node(LINE, $2, $4);}
             | tIF expr tTHEN innerblock elif         {$$ = new og::if_else_node(LINE, $2, $4, $5);}
             ;

elif         : tELSE innerblock                       {$$ = new og::if_node(LINE, nullptr, $2);}
             | tELIF expr tTHEN innerblock            {$$ = new og::if_node(LINE, $2,      $4);}
             | tELIF expr tTHEN innerblock elif       {$$ = new og::if_else_node(LINE, $2, $4, $5);}
             ;


/* -------------------------------------------------------------------------- */


/* Functions and procedures-------------------------------------------------- */

function  :           type  tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, $1, *$2, new cdk::sequence_node(LINE),     "");}
          |           tAUTO tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, &unspec_primitive, *$2, new cdk::sequence_node(LINE),     "");}
          |           type  tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, $1, *$2, new cdk::sequence_node(LINE, $4), "");}
          |           tAUTO tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, &unspec_primitive, *$2, new cdk::sequence_node(LINE, $4), "");}
          |           type  tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, $1, *$2, new cdk::sequence_node(LINE),     $5, "");}
          |           tAUTO tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, &unspec_primitive, *$2, new cdk::sequence_node(LINE),     $5, "");}
          |           type  tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, $1, *$2, new cdk::sequence_node(LINE, $4), $6, "");}
          |           tAUTO tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, &unspec_primitive, *$2, new cdk::sequence_node(LINE, $4), $6, "");}
          | tPUBLIC   type  tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, $2, *$3, new cdk::sequence_node(LINE),     *$1);}
          | tPUBLIC   tAUTO tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE),     *$1);}
          | tPUBLIC   type  tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, $2, *$3, new cdk::sequence_node(LINE, $5), *$1);}
          | tPUBLIC   tAUTO tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE, $5), *$1);}
          | tPUBLIC   type  tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, $2, *$3, new cdk::sequence_node(LINE),     $6, *$1);}
          | tPUBLIC   tAUTO tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE),     $6, *$1);}
          | tPUBLIC   type  tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, $2, *$3, new cdk::sequence_node(LINE, $5), $7, *$1);}
          | tPUBLIC   tAUTO tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE, $5), $7, *$1);}
          | tREQUIRE  type  tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, $2, *$3, new cdk::sequence_node(LINE),     *$1);}
          | tREQUIRE  tAUTO tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE),     *$1);}
          | tREQUIRE  type  tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, $2, *$3, new cdk::sequence_node(LINE, $5), *$1);}
          | tREQUIRE  tAUTO tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE, $5), *$1);}
          | tREQUIRE  type  tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, $2, *$3, new cdk::sequence_node(LINE),     $6, *$1);}
          | tREQUIRE  tAUTO tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE),     $6, *$1);}
          | tREQUIRE  type  tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, $2, *$3, new cdk::sequence_node(LINE, $5), $7, *$1);}
          | tREQUIRE  tAUTO tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, &unspec_primitive, *$3, new cdk::sequence_node(LINE, $5), $7, *$1);}
          ;

procedure :           tPROCEDURE tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, nullptr, *$2, new cdk::sequence_node(LINE),      "");}
          |           tPROCEDURE tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, nullptr, *$2, new cdk::sequence_node(LINE, $4),  "");}
          |           tPROCEDURE tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, nullptr, *$2, new cdk::sequence_node(LINE),     $5,   "");}
          |           tPROCEDURE tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, nullptr, *$2, new cdk::sequence_node(LINE, $4), $6,   "");}
          | tPUBLIC   tPROCEDURE tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, nullptr, *$3, new cdk::sequence_node(LINE),     *$1);}
          | tPUBLIC   tPROCEDURE tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, nullptr, *$3, new cdk::sequence_node(LINE, $5), *$1);}
          | tPUBLIC   tPROCEDURE tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, nullptr, *$3, new cdk::sequence_node(LINE),      $6, *$1);}
          | tPUBLIC   tPROCEDURE tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, nullptr, *$3, new cdk::sequence_node(LINE, $5),  $7, *$1);}
          | tREQUIRE  tPROCEDURE tIDENTIFIER '('           ')'                 {$$ = new og::function_declaration_node(LINE, nullptr, *$3, new cdk::sequence_node(LINE),     *$1);}
          | tREQUIRE  tPROCEDURE tIDENTIFIER '(' variables ')'                 {$$ = new og::function_declaration_node(LINE, nullptr, *$3, new cdk::sequence_node(LINE, $5), *$1);}
          | tREQUIRE  tPROCEDURE tIDENTIFIER '('           ')' block  {$$ = new og::function_definition_node (LINE, nullptr, *$3, new cdk::sequence_node(LINE),      $6, *$1);}
          | tREQUIRE  tPROCEDURE tIDENTIFIER '(' variables ')' block  {$$ = new og::function_definition_node (LINE, nullptr, *$3, new cdk::sequence_node(LINE, $5),  $7, *$1);}
          ;


/* -------------------------------------------------------------------------- */


/* Blocks ------------------------------------------------------------------- */

/* We should reverse the sequence's nodes order when building a block */
block      : '{'                                     '}' { $$ = new og::block_node(LINE, new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE)); }
           | '{' function_declarations               '}' { $$ = new og::block_node(LINE, new cdk::sequence_node(LINE, $2), new cdk::sequence_node(LINE)); }
           | '{'                        instructions '}' { $$ = new og::block_node(LINE, new cdk::sequence_node(LINE),     new cdk::sequence_node(LINE, $2)); }
           | '{' function_declarations  instructions '}' { $$ = new og::block_node(LINE, new cdk::sequence_node(LINE, $2), new cdk::sequence_node(LINE, $3));}
           ;

innerblock : instruction { $$ = $1;}
           | block       { $$ = $1;}
           ;
/* -------------------------------------------------------------------------- */


/* Declarations inside of functions ----------------------------------------- */
/* Special because they don't include functions - only variables. */

function_declaration  : variables ';' { $$ = $1; }
                      ;

function_declarations : function_declaration                        { $$ = new cdk::sequence_node(LINE, $1);     }
                      | function_declaration function_declarations  { $$ = new cdk::sequence_node(LINE, $1, $2); }
                      ;

/* -------------------------------------------------------------------------- */

/* Expressions -------------------------------------------------------------- */

/* auto a = d@3, "coisas", f, d */

expr        : tINTEGER                        { $$ = new cdk::integer_node(LINE, $1); }
      	    | tSTRING                         { $$ = new cdk::string_node(LINE, $1);  }
            | tNULLPTR                        { $$ = new og::nullptr_node(LINE);      }
            | '-' expr %prec tUNARY           { $$ = new cdk::neg_node(LINE, $2);     }
            | '+' expr %prec tUNARY           { $$ = new og::identity_node(LINE, $2); }
            | expr '+' expr	                  { $$ = new cdk::add_node(LINE, $1, $3); }
            | expr '-' expr	                  { $$ = new cdk::sub_node(LINE, $1, $3); }
            | expr '*' expr	                  { $$ = new cdk::mul_node(LINE, $1, $3); }
            | expr '/' expr	                  { $$ = new cdk::div_node(LINE, $1, $3); }
            | expr '%' expr	                  { $$ = new cdk::mod_node(LINE, $1, $3); }
            | expr '<' expr	                  { $$ = new cdk::lt_node(LINE, $1, $3);  }
            | expr '>' expr	                  { $$ = new cdk::gt_node(LINE, $1, $3);  }
            | expr tGE expr	                  { $$ = new cdk::ge_node(LINE, $1, $3);  }
            | expr tLE expr                   { $$ = new cdk::le_node(LINE, $1, $3);  }
            | expr tNE expr	                  { $$ = new cdk::ne_node(LINE, $1, $3);  }
            | expr tEQ expr	                  { $$ = new cdk::eq_node(LINE, $1, $3);  }
            | '(' expr ')'                    { $$ = $2;                              }
            | identifier                      { $$ = new cdk::rvalue_node(LINE, $1);  }
            | identifier        '?'           { $$ = new og::address_node(LINE, $1);  }
            | expr '[' expr ']'               { $$ = new cdk::rvalue_node(LINE, new og::index_node(LINE, $1, $3)); }
            | expr '@' tINTEGER               { $$ = new cdk::rvalue_node(LINE, new og::tuple_index_node(LINE, $1, new cdk::integer_node(LINE, $3)));  }
            | tIDENTIFIER '(' expressions ')' {$$ = new og::function_call_node(LINE, *$1, $3);}
            ;

expressions : expr                 { $$ = new cdk::sequence_node(LINE, $1);     }
            | expressions ',' expr { $$ = new cdk::sequence_node(LINE, $3, $1); }
            ;

/* -------------------------------------------------------------------------- */

/* TODO:
 * reduzir quantidade de sequence nodes a serem criados
 */
 
%%

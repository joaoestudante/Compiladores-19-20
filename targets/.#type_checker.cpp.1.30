#include <string>
#include "targets/type_checker.h"
#include "ast/all.h"  // automatically generated
#include <cdk/types/primitive_type.h>

#define ASSERT_UNSPEC { if (node->type() != nullptr && !node->is_typed(cdk::TYPE_UNSPEC)) return; }

std::vector<std::shared_ptr<cdk::basic_type>> get_args_types(std::vector<cdk::basic_node*> nodes) {
    /* This method is responsible for finding the types of a given vector of nodes.
     * It is meant to be used after registering a symbol for a function definition
     * or declaration.
     * This method cannot exist inside the symbol.h file due to problems with importing
     * nodes.
     */
    std::vector<std::shared_ptr<cdk::basic_type>> types = std::vector<std::shared_ptr<cdk::basic_type>>();
    for (cdk::basic_node* n : nodes) {
        // they're variable declarations, aka expressions - and we're only interested in its type
        cdk::expression_node *arg = dynamic_cast<cdk::expression_node*>(n);
        types.push_back(arg->type());
    }
    return types;
}


//---------------------------------------------------------------------------

void og::type_checker::do_sequence_node(cdk::sequence_node *const node, int lvl) {
  // TODO: Iterate over all nodes in the sequence, make them accept the type_checker
  // QUESTION: Will it require casts?
  for (auto n : node->nodes()) n->accept(this, lvl + 2);
}

//---------------------------------------------------------------------------

void og::type_checker::do_nil_node(cdk::nil_node *const node, int lvl) {
  // EMPTY
}
void og::type_checker::do_data_node(cdk::data_node *const node, int lvl) {
  // EMPTY
}

void og::type_checker::do_double_node(cdk::double_node *const node, int lvl) {
    ASSERT_UNSPEC;
    node->type(cdk::make_primitive_type(8, cdk::TYPE_DOUBLE));
}
void og::type_checker::do_not_node(cdk::not_node *const node, int lvl) {
    ASSERT_UNSPEC;
    node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}
void og::type_checker::do_and_node(cdk::and_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}
void og::type_checker::do_or_node(cdk::or_node *const node, int lvl) {
    ASSERT_UNSPEC;
    node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}

//---------------------------------------------------------------------------

void og::type_checker::do_integer_node(cdk::integer_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}

void og::type_checker::do_string_node(cdk::string_node *const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(cdk::make_primitive_type(4, cdk::TYPE_STRING));
}

//---------------------------------------------------------------------------

void og::type_checker::processUnaryExpression(cdk::unary_operation_node *const node, int lvl) {
  node->argument()->accept(this, lvl + 2);

  // TODO: delett dis
  //if (!node->argument()->is_typed(cdk::TYPE_INT)) throw std::string("wrong type in argument of unary expression");

  // in Simple, expressions are always int - but not in og!
  // our types are: int, real, string, ptr
  // our unary operations are:
  //   memory_alloc (things like   ptr<real>p = [5]   ): QUESTION: What should the type be in this case? ptr?
  //   identity_node and neg_node: type should be the type of the expression inside

  // QUESTION: Dis makes sense? Do we want this in ALL cases?
  node->type(node->argument()->type());
  //node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}

void og::type_checker::do_neg_node(cdk::neg_node *const node, int lvl) {
  processUnaryExpression(node, lvl);
}

void og::type_checker::do_identity_node(og::identity_node *const node, int lvl) {
    processUnaryExpression(node, lvl);
}

//---------------------------------------------------------------------------

void og::type_checker::processBinaryExpression(cdk::binary_operation_node *const node, int lvl) {
  // TODO: Remove the assertions for only ints
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  if (!node->left()->is_typed(cdk::TYPE_INT)) throw std::string("wrong type in left argument of binary expression");

  node->right()->accept(this, lvl + 2);
  if (!node->right()->is_typed(cdk::TYPE_INT)) throw std::string("wrong type in right argument of binary expression");

  // in Simple, expressions are always int - but not in og!
  node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
}

void og::type_checker::do_add_node(cdk::add_node *const node, int lvl) {
    /* Adding is supported between the following types:
     * int, double
     * int, int
     * double, double
     * int, pointer
     */
     ASSERT_UNSPEC;
     auto left = node->left();
     auto right = node->right();

     left->accept(this, lvl);
     if (!left->is_typed(cdk::TYPE_INT) && !left->is_typed(cdk::TYPE_DOUBLE) && !left->is_typed(cdk::TYPE_POINTER))
        throw std::string("unsupported type in left of add: " + cdk::to_string(left->type()));

    right->accept(this, lvl);
    if (!right->is_typed(cdk::TYPE_INT) && !right->is_typed(cdk::TYPE_DOUBLE) && !right->is_typed(cdk::TYPE_POINTER))
       throw std::string("unsupported type in right of add: " + cdk::to_string(right->type()));

     if (
         (left->is_typed(cdk::TYPE_DOUBLE) && right->is_typed(cdk::TYPE_POINTER)) ||
         (left->is_typed(cdk::TYPE_POINTER) && right->is_typed(cdk::TYPE_DOUBLE))
     ) {
         throw std::string("cannot add double and pointer");
     }

     // decide type of add - it's the type of the left operand by default, but may be changed down the line
     // if the compiler finds things like int x = 3.4 + 2
    node->type(left->type());
}
void og::type_checker::do_sub_node(cdk::sub_node *const node, int lvl) {
    /* Subtraction is supported between the following types:
     * int, double
     * int, int
     * double, double
     * pointer, pointer
     */
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_mul_node(cdk::mul_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_div_node(cdk::div_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_mod_node(cdk::mod_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_lt_node(cdk::lt_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_le_node(cdk::le_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_ge_node(cdk::ge_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_gt_node(cdk::gt_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_ne_node(cdk::ne_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}
void og::type_checker::do_eq_node(cdk::eq_node *const node, int lvl) {
  processBinaryExpression(node, lvl);
}

//---------------------------------------------------------------------------

void og::type_checker::do_variable_node(cdk::variable_node *const node, int lvl) {
  ASSERT_UNSPEC;
  const std::string &id = node->name();
  std::shared_ptr<og::symbol> symbol = _symtab.find(id);
  if (symbol != nullptr) {
    node->type(symbol->type());
  } else {
    throw id;
  }
}

void og::type_checker::do_rvalue_node(cdk::rvalue_node *const node, int lvl) {
  ASSERT_UNSPEC;
  try {
    node->lvalue()->accept(this, lvl);
    node->type(node->lvalue()->type());
  } catch (const std::string &id) {
    throw "undeclared variable '" + id + "'";
  }
}

void og::type_checker::do_assignment_node(cdk::assignment_node *const node, int lvl) {
  ASSERT_UNSPEC;
  // QUESTION: Should the check for tuple sizing be made here?
  try {
    node->lvalue()->accept(this, lvl);
  } catch (const std::string &id) {
    auto symbol = std::make_shared<og::symbol>(cdk::make_primitive_type(4, cdk::TYPE_INT), id, false, 0);
    _symtab.insert(id, symbol);
    _parent->set_new_symbol(symbol);  // advise parent that a symbol has been inserted
    node->lvalue()->accept(this, lvl);  //DAVID: bah!
  }

  node->rvalue()->accept(this, lvl + 2);

  if(node->lvalue()->is_typed(cdk::TYPE_INT)) {

      if(node->rvalue()->is_typed(cdk::TYPE_INT) || node->rvalue()->is_typed(cdk::TYPE_DOUBLE)) /* int = int or double, assignment is int */
          node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));

  } else if (node->lvalue()->is_typed(cdk::TYPE_DOUBLE)) {

      if(node->rvalue()->is_typed(cdk::TYPE_DOUBLE) || node->rvalue()->is_typed(cdk::TYPE_INT)) { /* double = double or int, assignment is double */
          node->type(cdk::make_primitive_type(8, cdk::TYPE_DOUBLE));
      }

  } else if (node->lvalue()->is_typed(cdk::TYPE_POINTER)) {

      if(node->rvalue()->is_typed(cdk::TYPE_POINTER)) { /* pointer = pointer, assignment is pointer */
          node->type(cdk::make_primitive_type(4, cdk::TYPE_POINTER));
      } else if (node->rvalue()->is_typed(cdk::TYPE_INT)) {
          node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));
      }

  } else if (node->lvalue()->is_typed(cdk::TYPE_STRING)) {

      if(node->rvalue()->is_typed(cdk::TYPE_STRING)) { /* string = string, assignment is string */
          node->type(cdk::make_primitive_type(4, cdk::TYPE_STRING));
      }

  } else {
      throw std::string("problem with types assignment");
  }

}

//---------------------------------------------------------------------------

/*
void og::type_checker::do_program_node(og::program_node *const node, int lvl) {
  // EMPTY
}
*/

void og::type_checker::do_evaluation_node(og::evaluation_node *const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
}

//---------------------------------------------------------------------------

void og::type_checker::do_if_node(og::if_node *const node, int lvl) {
  node->condition()->accept(this, lvl + 4);
}

void og::type_checker::do_if_else_node(og::if_else_node *const node, int lvl) {
  node->condition()->accept(this, lvl + 4);
}

//---------------------------------------------------------------------------

void og::type_checker::do_for_node(og::for_node *const node, int lvl) {
  // QUESTION: Requires new symtab environment? The block inside should take care of that,
  // but the variable initialization (if it exists) should be available too...
  if (node->declaration() != nullptr)
    node->declaration()->accept(this, lvl);
  if (node->condition() != nullptr)
    node->condition()->accept(this, lvl);
  if (node->increment() != nullptr)
    node->increment()->accept(this, lvl);

}

//---------------------------------------------------------------------------
void og::type_checker::do_function_declaration_node(og::function_declaration_node *const node, int lvl) {
    // NOTE: declaration is simply saying the function exists
    auto symbol = std::make_shared<og::symbol>(cdk::make_primitive_type(node->return_type()->size(), node->return_type()->name()), node->function_name(), true, 0);
    _symtab.insert(node->function_name(), symbol);
    auto newSymb = _symtab.find(node->function_name());
    newSymb->function_args(get_args_types(node->arguments()->nodes()));
    _symtab.replace(node->function_name(), newSymb);
    _parent->set_new_symbol(symbol);
}

void og::type_checker::do_function_definition_node(og::function_definition_node *const node, int lvl) {
    // NOTE: definition includes the code inside the function
    auto symbol = std::make_shared<og::symbol>(cdk::make_primitive_type(node->type()->size(), node->type()->name()), node->function_name(), true, 0);
    _symtab.insert(node->function_name(), symbol);
    auto newSymb = _symtab.find(node->function_name());
    newSymb->function_args(get_args_types(node->arguments()->nodes()));
    _symtab.replace(node->function_name(), newSymb);
    _parent->set_new_symbol(symbol);
    //node->arguments()->accept(this, lvl);
    //node->statements()->accept(this, lvl);
}

void og::type_checker::do_function_call_node(og::function_call_node *const node, int lvl) {
    // TODO: ensure arguments match
    auto symbol = _symtab.find(node->function_name());
    if (!symbol) {
        //std::cout << "could not find registered function with name " << node->function_name() << std::endl;
    } else {
        //std::cout << "found registered function with name " << node->function_name() << std::endl;

    }
    node->type(symbol->type());

}
void og::type_checker::do_variable_declaration_node(og::variable_declaration_node *const node, int lvl) {
    if (node->initial_val() != nullptr) {
        node->initial_val()->accept(this, lvl);
        if(node->variable_type()->name() == cdk::TYPE_UNSPEC || node->variable_type()->name() == cdk::TYPE_STRUCT) {
            node->set_variable_type(node->initial_val()->type()); //has type because it was accepted before
        } else {
            if (node->is_typed(cdk::TYPE_DOUBLE) && node->initial_val()->is_typed(cdk::TYPE_INT)) {
                node->initial_val()->type(node->type());
            }
            else if (node->type() != node->initial_val()->type()) {
                throw std::string("variable " + node->variable_name() + " declaration's type (" + cdk::to_string(node->variable_type()) + ") does not match initial value type (" + cdk::to_string(node->initial_val()->type()) + ")");
            }
        }
        node->type(node->initial_val()->type());
    }
    auto symbol = std::make_shared<og::symbol>(cdk::make_primitive_type(node->variable_type()->size(), node->variable_type()->name()), node->variable_name(), false, 0);
    _symtab.insert(node->variable_name(), symbol);
    _parent->set_new_symbol(symbol);
    node->type(node->variable_type());
}

void og::type_checker::do_address_node(og::address_node *const node, int lvl) {
    node->lvalue()->accept(this, lvl);
    node->type(cdk::reference_type_cast(node->lvalue()->type()));
}

void og::type_checker::do_index_node(og::index_node *const node, int lvl) {
    node->base()->accept(this, lvl);
    node->type(node->base()->type());
}

void og::type_checker::do_tuple_index_node(og::tuple_index_node *const node, int lvl) {
    // type of this is the type of the expression at the position given by the node
    node->base()->accept(this, lvl);

    node->type(cdk::make_primitive_type(0, cdk::TYPE_STRUCT));

}

void og::type_checker::do_memory_alloc_node(og::memory_alloc_node *const node, int lvl) {
    node->argument()->accept(this, lvl);
    node->type(cdk::make_primitive_type(4, cdk::TYPE_POINTER));
}



void og::type_checker::do_break_node(og::break_node *const node, int lvl) {
    // EMPTY
}
void og::type_checker::do_continue_node(og::continue_node *const node, int lvl) {
    // EMPTY
}
void og::type_checker::do_return_node(og::return_node *const node, int lvl) {
    /*TODO:
      If we found a return node, it means we are evaluating a function.
      We need to save the function we are evaluating, somewhere.
      And we need to check if the value inside the return matches with the
      return value of the function.
    */

    node->argument()->accept(this, lvl);
    if (node->argument()->is_typed(cdk::TYPE_STRUCT)) {
        // function must be auto aka TYPE_UNSPEC
    } else {
        // function must match type
    }
}
void og::type_checker::do_input_node(og::input_node *const node, int lvl) {
    // EMPTY
}
void og::type_checker::do_write_node(og::write_node *const node, int lvl) {
    node->sequence()->accept(this, lvl + 2);
}
void og::type_checker::do_writeln_node(og::writeln_node *const node, int lvl) {
    node->sequence()->accept(this, lvl + 2);
}
void og::type_checker::do_sizeof_node(og::sizeof_node *const node, int lvl) {
    ASSERT_UNSPEC;
    node->argument()->accept(this, lvl + 2);

    // QUESTION: What should the sizeof_node have as type? Int because it's a number?
    node->type(cdk::make_primitive_type(4, cdk::TYPE_INT));

}
void og::type_checker::do_nullptr_node(og::nullptr_node *const node, int lvl) {
    node->type(cdk::make_primitive_type(0, cdk::TYPE_VOID));
}
void og::type_checker::do_tuple_node(og::tuple_node *const node, int lvl) {
    node->contents()->accept(this, lvl + 2);
    std::vector<std::shared_ptr<cdk::basic_type>> *types_vector = new std::vector<std::shared_ptr<cdk::basic_type>>();
    for (auto e : node->contents()->nodes()) {
        auto e_expression = static_cast<cdk::expression_node*>(e);
        types_vector->push_back(e_expression->type());
    }
    node->type(cdk::make_structured_type(*types_vector));
}
void og::type_checker::do_block_node(og::block_node *const node, int lvl) {
    // QUESTION: push new symtab "frame"?
    //node->decs()->accept(this, lvl + 2);
    //node->instructs()->accept(this, lvl + 2);
}

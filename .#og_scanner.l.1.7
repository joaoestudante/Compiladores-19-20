%option c++ prefix="og_scanner_" outfile="og_scanner.cpp"
%option stack noyywrap yylineno 8bit debug
%{
// make relevant includes before including the parser's tab file
#include <string>
#include <sstream>
#include <cdk/ast/sequence_node.h>
#include <cdk/ast/expression_node.h>
#include <cdk/ast/lvalue_node.h>
#include "og_parser.tab.h"

// don't change this
#define yyerror LexerError
std::stringstream ss;
std::string complete_string = "";
%}
%x X_STRING X_COMMENT
%%

">="                return tGE;
"<="                return tLE;
"=="                return tEQ;
"!="                return tNE;

"auto"               return tAUTO;
"int"               return tINT;
"real"              return tREAL;
"string"            return tSTRING_TYPE;
"ptr"               return tPTR;
"public"            yylval.s = new std::string("public"); return tPUBLIC;
"require"           yylval.s = new std::string("require"); return tREQUIRE;
"sizeof"            return tSIZEOF;
"input"             return tINPUT;
"nullptr"           return tNULLPTR;

"return"            return tRETURN;
"procedure"         return tPROCEDURE;
"break"             return tBREAK;
"continue"          return tCONTINUE;
"if"                return tIF;
"then"              return tTHEN;
"elif"              return tELIF;
"else"              return tELSE;
"for"               return tFOR;
"do"                return tDO;
"write"             return tWRITE;
"writeln"           return tWRITELN;



[A-Za-z][A-Za-z0-9_]*   yylval.s = new std::string(yytext); return tIDENTIFIER;


\"                              yy_push_state(X_STRING); std::cout << "tamos ai" << std::endl;
<X_STRING>\"                    yy_pop_state(); std::cout << complete_string << std::endl;
<X_STRING>\\\"                  complete_string += yytext + 1;
<X_STRING>\\\\                  complete_string += yytext + 1;
<X_STRING>.                     complete_string += yytext;
<X_STRING>\\\n|\\\t|\\\r        complete_string += yytext + 1;
<X_STRING>\\0                   yy_pop_state(); *yylval.s = complete_string; std::cout << "e aqui tamos" << std::endl; return tSTRING;


"/*"                   yy_push_state(X_COMMENT);
<X_COMMENT>"/*"        yy_push_state(X_COMMENT);
<X_COMMENT>"*/"        yy_pop_state();
<X_COMMENT>.|\n        ;
"//".*$                ;


[0-9]+                  yylval.i = strtol(yytext, nullptr, 10); return tINTEGER;
"0x"[0-9a-fA-F]+       ss << std::hex << yytext+2; ss >> yylval.i; return tINTEGER;

([0-9]*\.[0-9]+|[0-9]+\.[0-9])([Ee]([-+])?[0-9]+)?      yylval.d = strtod(yytext, nullptr); return tREAL;



[-()<>=+*/%;{},.@\[\]]       return *yytext;

[ \t\n]+               ; /* ignore whitespace */

.                       yyerror("Unknown character");

%%
